// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package pmsg

import (
	"fmt"
	"io"
	"math"
	"sort"

	gpbft "github.com/filecoin-project/go-f3/gpbft"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufPartialGMessage = []byte{130}

func (t *PartialGMessage) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufPartialGMessage); err != nil {
		return err
	}

	// t.GMessage (gpbft.GMessage) (struct)
	if err := t.GMessage.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.VoteValueKey (gpbft.ECChainKey) (array)
	if len(t.VoteValueKey) > 32 {
		return xerrors.Errorf("Byte array in field t.VoteValueKey was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.VoteValueKey))); err != nil {
		return err
	}

	if _, err := cw.Write(t.VoteValueKey[:]); err != nil {
		return err
	}
	return nil
}

func (t *PartialGMessage) UnmarshalCBOR(r io.Reader) (err error) {
	*t = PartialGMessage{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.GMessage (gpbft.GMessage) (struct)

	{

		b, err := cr.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := cr.UnreadByte(); err != nil {
				return err
			}
			t.GMessage = new(gpbft.GMessage)
			if err := t.GMessage.UnmarshalCBOR(cr); err != nil {
				return xerrors.Errorf("unmarshaling t.GMessage pointer: %w", err)
			}
		}

	}
	// t.VoteValueKey (gpbft.ECChainKey) (array)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 32 {
		return fmt.Errorf("t.VoteValueKey: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	if extra != 32 {
		return fmt.Errorf("expected array to have 32 elements")
	}

	t.VoteValueKey = [32]uint8{}
	if _, err := io.ReadFull(cr, t.VoteValueKey[:]); err != nil {
		return err
	}
	return nil
}
